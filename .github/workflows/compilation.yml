name: CI

on:
  push:
  pull_request:


jobs:
  build:
    runs-on: ubuntu-latest
    container: swift:5.2.3-bionic
    steps:
    - uses: actions/checkout@v2

    - name: Donwload ps4libdoc branch 5.05
      run: |
        git clone --depth 1  https://github.com/orbisdev/ps4libdoc -b 5.05

    - name: Compile project (in Release)
      run: |
        swift build -c release
    
    - name: Run project
      run: |
        ./.build/release/orbis-parser

    - name: Prepare Artifacts
      run: |
        tar -zcvf lib_s.tar.gz lib_s
    
    - uses: actions/upload-artifact@v2
      with:
        name: lib_s
        path: lib_s.tar.gz

    - name: Create tag name
      if: startsWith(github.ref, 'refs/tags/') != true
      run: |
        export TAGNAME="snapshot_$(date +'%Y_%m_%d_%H%M%S')"
        echo "NEW_TAGNAME=$TAGNAME" >> $GITHUB_ENV
    
    - name: Use tag name
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        export TAGNAME="$(echo ${GITHUB_REF##*/})"
        echo "NEW_TAGNAME=$TAGNAME" >> $GITHUB_ENV
    
    - name: Release
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        files: lib_s.tar.gz
        tag_name: ${{ env.NEW_TAGNAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Send Compile action
      if: startsWith(github.ref, 'refs/tags/') != true && github.ref != 'refs/heads/master'
      run: |
        export DISPATCH_ACTION="$(echo run_build_libs_gen)"
        echo "NEW_DISPATCH_ACTION=$DISPATCH_ACTION" >> $GITHUB_ENV
    
    - name: Send Release action
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
      run: |
        export DISPATCH_ACTION="$(echo run_release_libs_gen)"
        echo "NEW_DISPATCH_ACTION=$DISPATCH_ACTION" >> $GITHUB_ENV

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        repository: ${{ github.repository_owner }}/orbis-sysroot
        token: ${{ secrets.DISPATCH_TOKEN }}
        event-type: ${{ env.NEW_DISPATCH_ACTION }}
        client-payload: '{"ref": "${{ github.ref }}"}'